package test;

import java.util.*; 
import java.net.*; 
import java.io.*;  
import java.util.concurrent.*; 
public class EchoServer{  
private int port = 8000;   
private ServerSocket serverSocket;   
private ExecutorService executorService;   
private final int POOL_SIZE = 100;     
public EchoServer() throws IOException{   
serverSocket = new ServerSocket(port);   
    
  

executorService =  Executors.newFixedThreadPool(       
Runtime.getRuntime().availableProcessors()*POOL_SIZE);    
System.out.println("number of thread:"+Runtime.getRuntime().availableProcessors());
System.out.println("start server");
}

public void service(){   
while(true){    
Socket socket = null;    
try{     
socket = serverSocket.accept();      
executorService.execute(new Handler(socket));          
}catch(IOException e){      
e.printStackTrace();      
}    
}   
}   
 
class Handler implements Runnable{   
private Socket socket;    
public Handler(Socket socket){     
this.socket = socket;    
}    
private PrintWriter getWriter(Socket socket)throws IOException{    
OutputStream socketOut = socket.getOutputStream();    
return new PrintWriter(socketOut,true);    
}       
private BufferedReader getReader(Socket socket) throws IOException{    
InputStream socketIn =socket.getInputStream();     
return new BufferedReader(new InputStreamReader(socketIn));     
}            
public void run(){    
try{        
	System.out.println("New connect port:"+socket.getPort());
    BufferedReader br=getReader(socket);
    PrintWriter pw=getWriter(socket);
    String msg=null;
     while((msg=br.readLine())!=null){
    	if(msg.equals("HELO text")){
    		InetAddress addr = InetAddress.getLocalHost();
    		String ip = addr.getHostAddress().toString();
    		pw.println("HELO text IP:"+ip+
					"Port:"+socket.getPort()+
					"StudentID:14300455");
    	}else if(msg.equals("KILL_SERVICE")){
    		pw.println("Server shut down");
    		System.exit(0);;
    	}else{
    		System.out.println("Client:"+msg);
    		pw.println("");
    	}
    }
}catch(IOException e){     
e.printStackTrace();    
}finally{      
try{      
if(null != socket){        
socket.close();       
}       
}catch(IOException e){       
e.printStackTrace();       
}     
}    
}   
}
public static void main(String args[])throws Exception{   
new EchoServer().service();    
}      
}
